apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

apply from: "${rootDir}/scripts/javadoc.gradle"
apply from: "${rootDir}/scripts/publishing.gradle"
apply from: "${rootDir}/scripts/semantic_versioning.gradle"

// Temporarily removed before switching to spotbugs
//apply from: "${rootDir}/scripts/quality.gradle"

group = 'de.prosiebensat1digital'

android {
    compileSdkVersion rootProject.ext.versions.compile_sdk
    namespace "de.prosiebensat1digital.oasisjsbridge"

    defaultConfig {
        targetSdkVersion rootProject.ext.versions.target_sdk
        minSdkVersion rootProject.ext.versions.min_sdk

        consumerProguardFiles file('consumer-proguard-rules.pro')

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ndk {
            abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
        }

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main {
            assets.srcDirs += ['src/main/assets']
            java.srcDirs += ['src/main/kotlin']
            test.java.srcDirs += ['src/test/kotlin']
            androidTest.java.srcDirs += ['src/androidTest/kotlin']
        }
    }

    buildFeatures {
        buildConfig true
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    flavorDimensions "jsInterpreter"

    productFlavors {
        duktape {
            dimension "jsInterpreter"

            def jniLibName="duktape-jni-lib"

            buildConfigField "String", "JNI_LIB_NAME", "\"$jniLibName\""
            buildConfigField "Boolean", "HAS_BUILTIN_PROMISE", "false"

            externalNativeBuild {
                cmake {
                    arguments "-DFLAVOR=DUKTAPE", "-DJNI_LIB_NAME=$jniLibName"
                }
            }
        }

        quickjs {
            dimension "jsInterpreter"

            def serverPort=0
            def jniLibName="quickjs-jni-lib"

            buildConfigField "String", "JNI_LIB_NAME", "\"$jniLibName\""
            buildConfigField "Boolean", "HAS_BUILTIN_PROMISE", "true"
            buildConfigField "Integer", "DUKTAPE_DEBUGGER_SERVER_PORT", "$serverPort"

            externalNativeBuild {
                cmake {
                    arguments "-DFLAVOR=QUICKJS", "-DJNI_LIB_NAME=$jniLibName"
                }
            }
        }
    }
}

// Temporary workaround for mockk (see https://github.com/mockk/mockk/issues/281)
configurations.all {
    resolutionStrategy {
        force("org.objenesis:objenesis:2.6")
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions.freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-reflect:$versions.kotlin.kotlin"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlin.coroutines"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.kotlin.coroutines"

    implementation "com.jakewharton.timber:timber:$versions.timber"
    implementation "com.squareup.okhttp3:okhttp:$versions.okhttp"
    implementation "com.google.code.gson:gson:$versions.gson"

    implementation "androidx.annotation:annotation:$versions.androidx.annotation"

    implementation 'com.linkedin.dexmaker:dexmaker:2.28.1'

    testImplementation "junit:junit:$versions.junit"
    testImplementation 'org.json:json:20180813'
    testImplementation "com.google.truth:truth:1.4.1"

    androidTestImplementation "junit:junit:$versions.junit"

    testImplementation "org.jetbrains.kotlin:kotlin-test:$versions.kotlin.kotlin"
    testImplementation "io.mockk:mockk:$versions.mockk"

    androidTestImplementation "androidx.test:core:1.5.0"
    androidTestImplementation "androidx.test:runner:1.5.2"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$versions.kotlin.kotlin"
    androidTestImplementation "io.mockk:mockk-android:$versions.mockk"
}
